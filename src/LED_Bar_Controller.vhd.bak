-- LED BAR CONTROLLER
-- Controls the 10 LED's on the DE10 board to visually represent 16-bit values with a bar that fills up
-- Updated 23MAR2025

-- Copying inclusions from SCOMP because I don't know what we need
library altera_mf;
library lpm;
library ieee;

use altera_mf.altera_mf_components.all;
use lpm.lpm_components.all;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- Entity block defines the I/O of design; how the hardware will interface with the outside world
entity LED_Bar_Controller is
	port(
	clock			:in	std_logic;								-- 100KHz Clock is used for PWM control of LED brightness
	led_write	:in	std_logic;								-- Signal from IO decoder to change displayed value
--	mv_write		:in	std_logic;								-- Signal from IO decoder to change max value
	data_in		:in	std_logic_vector(15 downto 0);	-- 16-bit value from SCOMP
	data_out		:out	std_logic_vector(15 downto 0) 	-- LED output
	);
end LED_Bar_Controller;

-- Architecture block defines the internal behavior/structure of entity
architecture Behavior of LED_Bar_Controller is
	-- Typedef
	type 		int_array is array(0 to 9) of integer;
	
	-- Signals (Variables)
	signal 	led_order : int_array;							-- Array that holds the order the LED's will illuminate in
	signal 	input_mag : integer;								-- Absolute value of input
	
	-- Constants
	constant max_val   : integer := 1000;					-- The input magnitude that will saturate the output
	constant led_range : integer := (max_val / 10);		-- The range of values that one LED can display
	constant led_thresh : int_array := ( 					-- Threshold values for LED's to turn fully on
	led_range*1,led_range*2,led_range*3,led_range*4,led_range*5,
	led_range*6,led_range*7,led_range*8,led_range*9,led_range*10);

begin
	-- This process only runs when a value is written to the LED bar
	process(led_write)
	begin
		-- Only update the LED values when led_write is high
		if(led_write = '1') then
		
			input_mag <= abs(to_integer(signed(data_in)));
		
			-- Swap the illumination order if input is negative
			if(data_in(15) = '0') then
				led_order <= (9, 8, 7, 6, 5, 4, 3, 2, 1, 0);
			else
				led_order <= (0, 1, 2, 3, 4, 5, 6, 7, 8, 9);
			end if;
				
			-- For loop turns fully-illuminated LED's on
			for i in 0 to 9 loop
				if(input_mag > led_thresh(i)) then
					data_out(led_order(i)) <= '1';
				else
					-- Tristate LED if it isn't fully illuminated to allow PWM to drive
					data_out(led_order(i)) <= 'Z';
				end if;
			end loop;

		end if;
	end process;
end Behavior;
